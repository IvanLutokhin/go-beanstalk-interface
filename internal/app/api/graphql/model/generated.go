// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/IvanLutokhin/go-beanstalk"
	"github.com/IvanLutokhin/go-beanstalk-interface/internal/app/api/security"
)

type CreateJobInput struct {
	Tube     string `json:"tube"`
	Priority int    `json:"priority"`
	Delay    int    `json:"delay"`
	Ttr      int    `json:"ttr"`
	Data     string `json:"data"`
}

type CreateJobPayload struct {
	Tube string `json:"tube"`
	ID   int    `json:"id"`
}

type DeleteJobInput struct {
	ID int `json:"id"`
}

type DeleteJobPayload struct {
	ID int `json:"id"`
}

type DeleteJobsInput struct {
	Tube  string `json:"tube"`
	Count *int   `json:"count"`
}

type DeleteJobsPayload struct {
	Count int `json:"count"`
}

type Job struct {
	ID    int                 `json:"id"`
	Data  string              `json:"data"`
	Stats *beanstalk.StatsJob `json:"stats"`
}

type KickJobInput struct {
	ID int `json:"id"`
}

type KickJobPayload struct {
	ID int `json:"id"`
}

type KickJobsInput struct {
	Tube  string `json:"tube"`
	Count *int   `json:"count"`
}

type KickJobsPayload struct {
	Count int `json:"count"`
}

type Me struct {
	User *security.User `json:"user"`
}

type PauseTubeInput struct {
	Tube  string `json:"tube"`
	Delay int    `json:"delay"`
}

type PauseTubePayload struct {
	Tube string `json:"tube"`
}

type Server struct {
	Stats *beanstalk.Stats `json:"stats"`
}

type Tube struct {
	Name       string               `json:"name"`
	Stats      *beanstalk.StatsTube `json:"stats"`
	ReadyJob   *Job                 `json:"readyJob"`
	DelayedJob *Job                 `json:"delayedJob"`
	BuriedJob  *Job                 `json:"buriedJob"`
}

type TubeConnection struct {
	Edges []TubeEdge `json:"edges"`
}

type TubeEdge struct {
	Node *Tube `json:"node"`
}

type Scope string

const (
	ScopeReadServer Scope = "READ_SERVER"
	ScopeReadTubes  Scope = "READ_TUBES"
	ScopeReadJobs   Scope = "READ_JOBS"
	ScopeWriteJobs  Scope = "WRITE_JOBS"
)

var AllScope = []Scope{
	ScopeReadServer,
	ScopeReadTubes,
	ScopeReadJobs,
	ScopeWriteJobs,
}

func (e Scope) IsValid() bool {
	switch e {
	case ScopeReadServer, ScopeReadTubes, ScopeReadJobs, ScopeWriteJobs:
		return true
	}
	return false
}

func (e Scope) String() string {
	return string(e)
}

func (e *Scope) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Scope(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Scope", str)
	}
	return nil
}

func (e Scope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
